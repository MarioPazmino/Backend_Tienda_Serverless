service: backend-tienda-serverless

provider:
  name: aws
  runtime: nodejs20.x
  region: us-east-2
  environment:
    MONGODB_URI: ${.env:MONGODB_URI}
    JWT_SECRET: ${.env:JWT_SECRET}
  apiGateway:
    minimumCompressionSize: 1024
    throttle:
      burstLimit: 15
      rateLimit: 120

custom:
  # usagePlan eliminado porque ya no se usan API Keys
  prune:
    automatic: true
    number: 1

functions:
  adminLogin:
    handler: src/functions/admin/login.handler
    layers:
      - { Ref: NodeModulesLambdaLayer }
    events:
      - http:
          path: admin/login
          method: post
          cors: true
          # ...existing code...
  adminRegister:
    handler: src/functions/admin/register.handler
    layers:
      - { Ref: NodeModulesLambdaLayer }
    events:
      - http:
          path: admin/register
          method: post
          cors: true
          # ...existing code...
  getAllProducts:
    handler: src/functions/product/getAll.handler
    layers:
      - { Ref: NodeModulesLambdaLayer }
    events:
      - http:
          path: products
          method: get
          cors: true
  registerClick:
    handler: src/functions/click/registerClick.handler
    layers:
      - { Ref: NodeModulesLambdaLayer }
    events:
      - http:
          path: clicks
          method: post
          cors: true
  getClickStats:
    handler: src/functions/click/getStats.handler
    layers:
      - { Ref: NodeModulesLambdaLayer }
    events:
      - http:
          path: clicks
          method: get
          cors: true
          private: true
  countClicksByProduct:
    handler: src/functions/click/countByProduct.handler
    layers:
      - { Ref: NodeModulesLambdaLayer }
    events:
      - http:
          path: clicks/by-product
          method: get
          cors: true
          private: true
  getCommentStatsByProduct:
    handler: src/functions/comment/getStatsByProduct.handler
    layers:
      - { Ref: NodeModulesLambdaLayer }
    events:
      - http:
          path: comments/product/{productId}/stats
          method: get
          cors: true
  createComment:
    handler: src/functions/comment/create.handler
    layers:
      - { Ref: NodeModulesLambdaLayer }
    events:
      - http:
          path: comments
          method: post
          cors: true
  getCommentsByProduct:
    handler: src/functions/comment/getByProduct.handler
    layers:
      - { Ref: NodeModulesLambdaLayer }
    events:
      - http:
          path: comments/product/{productId}
          method: get
          cors: true
  getProductById:
    handler: src/functions/product/getById.handler
    layers:
      - { Ref: NodeModulesLambdaLayer }
    events:
      - http:
          path: products/{id}
          method: get
          cors: true
  createProduct:
    handler: src/functions/product/create.handler
    layers:
      - { Ref: NodeModulesLambdaLayer }
    events:
      - http:
          path: products
          method: post
          cors: true
          private: true
  updateProduct:
    handler: src/functions/product/update.handler
    layers:
      - { Ref: NodeModulesLambdaLayer }
    events:
      - http:
          path: products/{id}
          method: put
          cors: true
          private: true
  deleteProduct:
    handler: src/functions/product/delete.handler
    layers:
      - { Ref: NodeModulesLambdaLayer }
    events:
      - http:
          path: products/{id}
          method: delete
          cors: true
          private: true
  deleteAdmin:
    handler: src/functions/admin/delete.handler
    layers:
      - { Ref: NodeModulesLambdaLayer }
    events:
      - http:
          path: admin/{id}
          method: delete
          cors: true
          private: true
  setAdminFechaExpiracion:
    handler: src/functions/admin/setFechaExpiracion.handler
    layers:
      - { Ref: NodeModulesLambdaLayer }
    events:
      - http:
          path: admin/{id}/fecha-expiracion
          method: patch
          cors: true
          private: true
  setAdminActive:
    handler: src/functions/admin/setActive.handler
    layers:
      - { Ref: NodeModulesLambdaLayer }
    events:
      - http:
          path: admin/{id}/active
          method: patch
          cors: true
          private: true
  desactivarAdminsVencidos:
    handler: src/functions/admin/desactivarVencidos.handler
    layers:
      - { Ref: NodeModulesLambdaLayer }
    events:
      - schedule:
          rate: cron(0 2 * * ? *)
          enabled: true
    description: 'Desactiva automáticamente los admins vencidos todos los días a las 2am UTC'
  changeAdminPassword:
    handler: src/functions/admin/changePassword.handler
    layers:
      - { Ref: NodeModulesLambdaLayer }
    events:
      - http:
          path: admin/change-password
          method: post
          cors: true
          private: true
plugins:
  - serverless-dotenv-plugin
  - serverless-prune-plugin

layers:
  nodeModules:
    path: layer

